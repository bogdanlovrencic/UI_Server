// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Helpers;

namespace WebApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210111102125_AddingModels")]
    partial class AddingModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApp.Entities.Core.IdentifiedObject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AliasName");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("MRID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("IdentifiedObjects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentifiedObject");
                });

            modelBuilder.Entity("WebApp.Entities.Core.PowerSystemResource", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.IdentifiedObject");


                    b.ToTable("PowerSystemResource");

                    b.HasDiscriminator().HasValue("PowerSystemResource");
                });

            modelBuilder.Entity("WebApp.Entities.Meas.Measurement", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.IdentifiedObject");

                    b.Property<int>("DirectionMethod");

                    b.Property<int>("MeasurementType");

                    b.Property<string>("SaveAdress");

                    b.ToTable("Measurement");

                    b.HasDiscriminator().HasValue("Measurement");
                });

            modelBuilder.Entity("WebApp.Entities.Core.ConnectivityNodeContainer", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.PowerSystemResource");


                    b.ToTable("ConnectivityNodeContainer");

                    b.HasDiscriminator().HasValue("ConnectivityNodeContainer");
                });

            modelBuilder.Entity("WebApp.Entities.Core.Equipment", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.PowerSystemResource");


                    b.ToTable("Equipment");

                    b.HasDiscriminator().HasValue("Equipment");
                });

            modelBuilder.Entity("WebApp.Entities.Meas.Analog", b =>
                {
                    b.HasBaseType("WebApp.Entities.Meas.Measurement");

                    b.Property<float>("MaxValue");

                    b.Property<float>("MinValue");

                    b.Property<float>("NormalValue");

                    b.ToTable("Analog");

                    b.HasDiscriminator().HasValue("Analog");
                });

            modelBuilder.Entity("WebApp.Entities.Meas.Discrete", b =>
                {
                    b.HasBaseType("WebApp.Entities.Meas.Measurement");

                    b.Property<int>("MaxValue")
                        .HasColumnName("Discrete_MaxValue");

                    b.Property<int>("MinValue")
                        .HasColumnName("Discrete_MinValue");

                    b.Property<int>("NormalValue")
                        .HasColumnName("Discrete_NormalValue");

                    b.ToTable("Discrete");

                    b.HasDiscriminator().HasValue("Discrete");
                });

            modelBuilder.Entity("WebApp.Entities.Core.EquipmentContainer", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.ConnectivityNodeContainer");


                    b.ToTable("EquipmentContainer");

                    b.HasDiscriminator().HasValue("EquipmentContainer");
                });

            modelBuilder.Entity("WebApp.Entities.Core.ConductingEquipment", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.Equipment");


                    b.ToTable("ConductingEquipment");

                    b.HasDiscriminator().HasValue("ConductingEquipment");
                });

            modelBuilder.Entity("WebApp.Entities.Core.Substation", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.EquipmentContainer");


                    b.ToTable("Substation");

                    b.HasDiscriminator().HasValue("Substation");
                });

            modelBuilder.Entity("WebApp.Entities.Wires.EnergyConsumer", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.ConductingEquipment");


                    b.ToTable("EnergyConsumer");

                    b.HasDiscriminator().HasValue("EnergyConsumer");
                });

            modelBuilder.Entity("WebApp.Entities.Wires.RegulatingCondEq", b =>
                {
                    b.HasBaseType("WebApp.Entities.Core.ConductingEquipment");


                    b.ToTable("RegulatingCondEq");

                    b.HasDiscriminator().HasValue("RegulatingCondEq");
                });

            modelBuilder.Entity("WebApp.Entities.Wires.RotatingMachine", b =>
                {
                    b.HasBaseType("WebApp.Entities.Wires.RegulatingCondEq");

                    b.Property<float>("RatedS");

                    b.ToTable("RotatingMachine");

                    b.HasDiscriminator().HasValue("RotatingMachine");
                });

            modelBuilder.Entity("WebApp.Entities.Wires.Generator", b =>
                {
                    b.HasBaseType("WebApp.Entities.Wires.RotatingMachine");

                    b.Property<int>("GeneratorType");

                    b.Property<float>("MaxQ");

                    b.Property<float>("MinQ");

                    b.ToTable("Generator");

                    b.HasDiscriminator().HasValue("Generator");
                });
#pragma warning restore 612, 618
        }
    }
}
